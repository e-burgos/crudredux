{"ast":null,"code":"import { AGREGAR_PRODUCTO, AGREGAR_PRODUCTO_EXITO, AGREGAR_PRODUCTO_ERROR, COMENZAR_DESCARGA_PRODUCTOS, DESCARGA_PRODUCTOS_EXITO, DESCARGA_PRODUCTOS_ERROR } from '../types';\nimport clienteAxios from '../config/axios';\nimport Swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function crearNuevoProductoAction(producto) {\n  return async dispatch => {\n    dispatch(agregarProducto());\n\n    try {\n      // Insertar en la API\n      await clienteAxios.post('/productos', producto); // Si todo es correcto actualizamos el state\n\n      dispatch(agregarProductoExito(producto)); // Alerta\n\n      Swal.fire('Correcto', 'El producto se agrego correctamente', 'success');\n    } catch (error) {\n      console.log(error); // Si hay un error cambiar el state\n\n      dispatch(agregarProductoError(true)); // Alerta error\n\n      Swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Por favor intenta de nuevo.'\n      });\n    }\n  };\n}\n\nconst agregarProducto = () => ({\n  type: AGREGAR_PRODUCTO,\n  payload: true\n}); // Si el producto se guarda en la DB\n\n\nconst agregarProductoExito = producto => ({\n  type: AGREGAR_PRODUCTO_EXITO,\n  payload: producto\n}); // Si hubo un error\n\n\nconst agregarProductoError = estado => ({\n  type: AGREGAR_PRODUCTO_ERROR,\n  payload: estado\n}); // Funcion que descarga los productos de la DB\n\n\nexport function obtenerProductosAction() {\n  return async dispatch => {\n    dispatch(descargarProductos());\n\n    try {\n      const respuesta = await clienteAxios.get('/productos');\n      console.log(respuesta);\n    } catch (error) {}\n  };\n}\n\nconst descargarProductos = () => ({\n  type: COMENZAR_DESCARGA_PRODUCTOS,\n  payload: true\n});","map":{"version":3,"sources":["/Users/eburgos/Desktop/cursoReact/crudredux/src/actions/productoActions.js"],"names":["AGREGAR_PRODUCTO","AGREGAR_PRODUCTO_EXITO","AGREGAR_PRODUCTO_ERROR","COMENZAR_DESCARGA_PRODUCTOS","DESCARGA_PRODUCTOS_EXITO","DESCARGA_PRODUCTOS_ERROR","clienteAxios","Swal","crearNuevoProductoAction","producto","dispatch","agregarProducto","post","agregarProductoExito","fire","error","console","log","agregarProductoError","icon","title","text","type","payload","estado","obtenerProductosAction","descargarProductos","respuesta","get"],"mappings":"AAAA,SACAA,gBADA,EAEAC,sBAFA,EAGAC,sBAHA,EAIAC,2BAJA,EAKAC,wBALA,EAMAC,wBANA,QAOO,UAPP;AAQA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;AAC/C,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEC,eAAe,EAAjB,CAAR;;AAEA,QAAI;AACA;AACA,YAAML,YAAY,CAACM,IAAb,CAAkB,YAAlB,EAAgCH,QAAhC,CAAN,CAFA,CAIA;;AACAC,MAAAA,QAAQ,CAAEG,oBAAoB,CAACJ,QAAD,CAAtB,CAAR,CALA,CAOA;;AACAF,MAAAA,IAAI,CAACO,IAAL,CACI,UADJ,EAEI,qCAFJ,EAGI,SAHJ;AAMH,KAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADY,CAEZ;;AACAL,MAAAA,QAAQ,CAAEQ,oBAAoB,CAAC,IAAD,CAAtB,CAAR,CAHY,CAKZ;;AACAX,MAAAA,IAAI,CAACO,IAAL,CAAU;AACNK,QAAAA,IAAI,EAAE,OADA;AAENC,QAAAA,KAAK,EAAE,eAFD;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAAV;AAKH;AACJ,GA7BD;AA8BH;;AAED,MAAMV,eAAe,GAAG,OAAO;AAC3BW,EAAAA,IAAI,EAAEtB,gBADqB;AAE3BuB,EAAAA,OAAO,EAAE;AAFkB,CAAP,CAAxB,C,CAKA;;;AACA,MAAMV,oBAAoB,GAAGJ,QAAQ,KAAK;AACtCa,EAAAA,IAAI,EAAErB,sBADgC;AAEtCsB,EAAAA,OAAO,EAAEd;AAF6B,CAAL,CAArC,C,CAKA;;;AACA,MAAMS,oBAAoB,GAAIM,MAAD,KAAa;AACtCF,EAAAA,IAAI,EAAEpB,sBADgC;AAEtCqB,EAAAA,OAAO,EAAEC;AAF6B,CAAb,CAA7B,C,CAKA;;;AACA,OAAO,SAASC,sBAAT,GAAkC;AACrC,SAAO,MAAOf,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEgB,kBAAkB,EAApB,CAAR;;AAEA,QAAI;AACA,YAAMC,SAAS,GAAG,MAAMrB,YAAY,CAACsB,GAAb,CAAiB,YAAjB,CAAxB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,SAAZ;AACH,KAHD,CAGE,OAAOZ,KAAP,EAAc,CAEf;AACJ,GATD;AAUH;;AAED,MAAMW,kBAAkB,GAAG,OAAO;AAC9BJ,EAAAA,IAAI,EAAEnB,2BADwB;AAE9BoB,EAAAA,OAAO,EAAE;AAFqB,CAAP,CAA3B","sourcesContent":["import {  \nAGREGAR_PRODUCTO,\nAGREGAR_PRODUCTO_EXITO,\nAGREGAR_PRODUCTO_ERROR,\nCOMENZAR_DESCARGA_PRODUCTOS,\nDESCARGA_PRODUCTOS_EXITO,\nDESCARGA_PRODUCTOS_ERROR,\n} from '../types';\nimport clienteAxios from '../config/axios';\nimport Swal from 'sweetalert2';\n\n// Crear nuevos productos\nexport function crearNuevoProductoAction(producto) {\n    return async (dispatch) => {\n        dispatch( agregarProducto() );\n\n        try {\n            // Insertar en la API\n            await clienteAxios.post('/productos', producto);\n\n            // Si todo es correcto actualizamos el state\n            dispatch( agregarProductoExito(producto) );\n\n            // Alerta\n            Swal.fire(\n                'Correcto',\n                'El producto se agrego correctamente',\n                'success'\n            );\n\n        } catch (error) {\n            console.log(error);\n            // Si hay un error cambiar el state\n            dispatch( agregarProductoError(true) );\n\n            // Alerta error\n            Swal.fire({\n                icon: 'error',\n                title: 'Hubo un error',\n                text: 'Por favor intenta de nuevo.'\n            });\n        }\n    }\n}\n\nconst agregarProducto = () => ({\n    type: AGREGAR_PRODUCTO,\n    payload: true\n})\n\n// Si el producto se guarda en la DB\nconst agregarProductoExito = producto => ({\n    type: AGREGAR_PRODUCTO_EXITO,\n    payload: producto\n})\n\n// Si hubo un error\nconst agregarProductoError = (estado) => ({\n    type: AGREGAR_PRODUCTO_ERROR,\n    payload: estado\n})\n\n// Funcion que descarga los productos de la DB\nexport function obtenerProductosAction() {\n    return async (dispatch) => {\n        dispatch( descargarProductos() );\n\n        try {\n            const respuesta = await clienteAxios.get('/productos');\n            console.log(respuesta);\n        } catch (error) {\n            \n        }\n    }\n}\n\nconst descargarProductos = () => ({\n    type: COMENZAR_DESCARGA_PRODUCTOS,\n    payload: true\n})"]},"metadata":{},"sourceType":"module"}