{"ast":null,"code":"import { AGREGAR_PRODUCTO, AGREGAR_PRODUCTO_EXITO, AGREGAR_PRODUCTO_ERROR, COMENZAR_DESCARGA_PRODUCTOS, DESCARGA_PRODUCTOS_EXITO, DESCARGA_PRODUCTOS_ERROR, OBTENER_PRODUCTO_ELIMINAR, PRODUCTO_ELIMINADO_EXITO, PRODUCTO_ELIMINADO_ERROR, OBTENER_PRODUCTO_EDITAR, COMENZAR_EDICION_PRODUCTO, PRODUCTO_EDITADO_EXITO, PRODUCTO_EDITADO_ERROR } from '../types';\nimport clienteAxios from '../config/axios';\nimport swalWithBootstrapButtons from 'sweetalert2';\nimport Swal from 'sweetalert2'; // Crear nuevos productos\n\nexport function crearNuevoProductoAction(producto) {\n  return async dispatch => {\n    dispatch(agregarProducto());\n\n    try {\n      // Insertar en la API\n      await clienteAxios.post('/productos', producto); // Si todo es correcto actualizamos el state\n\n      dispatch(agregarProductoExito(producto)); // Alerta\n\n      Swal.fire('Agregado', 'Se agrego un nuevo producto', 'success');\n    } catch (error) {\n      console.log(error); // Si hay un error cambiar el state\n\n      dispatch(agregarProductoError(true)); // Alerta error\n\n      Swal.fire({\n        icon: 'error',\n        title: 'Hubo un error',\n        text: 'Por favor intenta de nuevo.'\n      });\n    }\n  };\n}\n\nconst agregarProducto = () => ({\n  type: AGREGAR_PRODUCTO,\n  payload: true\n}); // Si el producto se guarda en la DB\n\n\nconst agregarProductoExito = producto => ({\n  type: AGREGAR_PRODUCTO_EXITO,\n  payload: producto\n}); // Si hubo un error\n\n\nconst agregarProductoError = estado => ({\n  type: AGREGAR_PRODUCTO_ERROR,\n  payload: estado\n}); // Funcion que descarga los productos de la DB\n\n\nexport function obtenerProductosAction() {\n  return async dispatch => {\n    dispatch(descargarProductos());\n\n    try {\n      const respuesta = await clienteAxios.get('/productos');\n      dispatch(descargaProductosExitosa(respuesta.data));\n    } catch (error) {\n      console.log(error);\n      dispatch(descargaProductosError());\n    }\n  };\n}\n\nconst descargarProductos = () => ({\n  type: COMENZAR_DESCARGA_PRODUCTOS,\n  payload: true\n});\n\nconst descargaProductosExitosa = productos => ({\n  type: DESCARGA_PRODUCTOS_EXITO,\n  payload: productos\n});\n\nconst descargaProductosError = () => ({\n  type: DESCARGA_PRODUCTOS_ERROR,\n  payload: true\n}); // Selecciona y elimina el producto \n\n\nexport function borrarProductoAction(id) {\n  return async dispatch => {\n    dispatch(obtenerProductoEliminar(id));\n\n    try {\n      await clienteAxios.delete(`/productos/${id}`);\n      dispatch(eliminarProductoExito()); // Si se elimina mostrar alerta\n\n      swalWithBootstrapButtons.fire('Eliminado!', 'Este producto fue eliminado.', 'success');\n    } catch (error) {\n      console.log(error);\n      dispatch(eliminarProductoError());\n    }\n  };\n}\n\nconst obtenerProductoEliminar = id => ({\n  type: OBTENER_PRODUCTO_ELIMINAR,\n  payload: id\n});\n\nconst eliminarProductoExito = () => ({\n  type: PRODUCTO_ELIMINADO_EXITO,\n  payload: null\n});\n\nconst eliminarProductoError = () => ({\n  type: PRODUCTO_ELIMINADO_ERROR,\n  payload: true\n}); // Obtener un producto para su edicion\n\n\nexport function obtenerProductoEditarAction(producto) {\n  return async dispatch => {\n    dispatch(obtenerProductoEditar(producto));\n  };\n}\n\nconst obtenerProductoEditar = producto => ({\n  type: OBTENER_PRODUCTO_EDITAR,\n  payload: producto\n}); // Editar un producto en la api y el state\n\n\nexport function editarProductoAction(producto) {\n  return async dispatch => {\n    dispatch(editarProducto());\n\n    try {\n      await clienteAxios.put(`/productos/${producto.id}`, producto);\n      dispatch(editarProductoExito(producto));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n}\n\nconst editarProducto = () => ({\n  type: COMENZAR_EDICION_PRODUCTO\n});\n\nconst editarProductoExito = producto => ({\n  type: PRODUCTO_EDITADO_EXITO,\n  payload: producto\n});","map":{"version":3,"sources":["/Users/eburgos/Desktop/cursoReact/crudredux/src/actions/productoActions.js"],"names":["AGREGAR_PRODUCTO","AGREGAR_PRODUCTO_EXITO","AGREGAR_PRODUCTO_ERROR","COMENZAR_DESCARGA_PRODUCTOS","DESCARGA_PRODUCTOS_EXITO","DESCARGA_PRODUCTOS_ERROR","OBTENER_PRODUCTO_ELIMINAR","PRODUCTO_ELIMINADO_EXITO","PRODUCTO_ELIMINADO_ERROR","OBTENER_PRODUCTO_EDITAR","COMENZAR_EDICION_PRODUCTO","PRODUCTO_EDITADO_EXITO","PRODUCTO_EDITADO_ERROR","clienteAxios","swalWithBootstrapButtons","Swal","crearNuevoProductoAction","producto","dispatch","agregarProducto","post","agregarProductoExito","fire","error","console","log","agregarProductoError","icon","title","text","type","payload","estado","obtenerProductosAction","descargarProductos","respuesta","get","descargaProductosExitosa","data","descargaProductosError","productos","borrarProductoAction","id","obtenerProductoEliminar","delete","eliminarProductoExito","eliminarProductoError","obtenerProductoEditarAction","obtenerProductoEditar","editarProductoAction","editarProducto","put","editarProductoExito"],"mappings":"AAAA,SACAA,gBADA,EAEAC,sBAFA,EAGAC,sBAHA,EAIAC,2BAJA,EAKAC,wBALA,EAMAC,wBANA,EAOAC,yBAPA,EAQAC,wBARA,EASAC,wBATA,EAUAC,uBAVA,EAWAC,yBAXA,EAYAC,sBAZA,EAaAC,sBAbA,QAcO,UAdP;AAeA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,wBAAP,MAAqC,aAArC;AACA,OAAOC,IAAP,MAAiB,aAAjB,C,CAEA;;AACA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4C;AAC/C,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEC,eAAe,EAAjB,CAAR;;AAEA,QAAI;AACA;AACA,YAAMN,YAAY,CAACO,IAAb,CAAkB,YAAlB,EAAgCH,QAAhC,CAAN,CAFA,CAIA;;AACAC,MAAAA,QAAQ,CAAEG,oBAAoB,CAACJ,QAAD,CAAtB,CAAR,CALA,CAOA;;AACAF,MAAAA,IAAI,CAACO,IAAL,CACI,UADJ,EAEI,6BAFJ,EAGI,SAHJ;AAMH,KAdD,CAcE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADY,CAEZ;;AACAL,MAAAA,QAAQ,CAAEQ,oBAAoB,CAAC,IAAD,CAAtB,CAAR,CAHY,CAKZ;;AACAX,MAAAA,IAAI,CAACO,IAAL,CAAU;AACNK,QAAAA,IAAI,EAAE,OADA;AAENC,QAAAA,KAAK,EAAE,eAFD;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAAV;AAKH;AACJ,GA7BD;AA8BH;;AAED,MAAMV,eAAe,GAAG,OAAO;AAC3BW,EAAAA,IAAI,EAAE9B,gBADqB;AAE3B+B,EAAAA,OAAO,EAAE;AAFkB,CAAP,CAAxB,C,CAKA;;;AACA,MAAMV,oBAAoB,GAAGJ,QAAQ,KAAK;AACtCa,EAAAA,IAAI,EAAE7B,sBADgC;AAEtC8B,EAAAA,OAAO,EAAEd;AAF6B,CAAL,CAArC,C,CAKA;;;AACA,MAAMS,oBAAoB,GAAIM,MAAD,KAAa;AACtCF,EAAAA,IAAI,EAAE5B,sBADgC;AAEtC6B,EAAAA,OAAO,EAAEC;AAF6B,CAAb,CAA7B,C,CAKA;;;AACA,OAAO,SAASC,sBAAT,GAAkC;AACrC,SAAO,MAAOf,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEgB,kBAAkB,EAApB,CAAR;;AAEA,QAAI;AACA,YAAMC,SAAS,GAAG,MAAMtB,YAAY,CAACuB,GAAb,CAAiB,YAAjB,CAAxB;AACAlB,MAAAA,QAAQ,CAAEmB,wBAAwB,CAACF,SAAS,CAACG,IAAX,CAA1B,CAAR;AAEH,KAJD,CAIE,OAAOf,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,MAAAA,QAAQ,CAAEqB,sBAAsB,EAAxB,CAAR;AACH;AACJ,GAXD;AAYH;;AAED,MAAML,kBAAkB,GAAG,OAAO;AAC9BJ,EAAAA,IAAI,EAAE3B,2BADwB;AAE9B4B,EAAAA,OAAO,EAAE;AAFqB,CAAP,CAA3B;;AAKA,MAAMM,wBAAwB,GAAIG,SAAD,KAAgB;AAC7CV,EAAAA,IAAI,EAAE1B,wBADuC;AAE7C2B,EAAAA,OAAO,EAAES;AAFoC,CAAhB,CAAjC;;AAKA,MAAMD,sBAAsB,GAAG,OAAO;AAClCT,EAAAA,IAAI,EAAEzB,wBAD4B;AAElC0B,EAAAA,OAAO,EAAE;AAFyB,CAAP,CAA/B,C,CAKA;;;AACA,OAAO,SAASU,oBAAT,CAA8BC,EAA9B,EAAkC;AACrC,SAAO,MAAOxB,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEyB,uBAAuB,CAACD,EAAD,CAAzB,CAAR;;AAEA,QAAI;AACA,YAAM7B,YAAY,CAAC+B,MAAb,CAAqB,cAAaF,EAAG,EAArC,CAAN;AACAxB,MAAAA,QAAQ,CAAE2B,qBAAqB,EAAvB,CAAR,CAFA,CAIA;;AACA/B,MAAAA,wBAAwB,CAACQ,IAAzB,CACA,YADA,EAEA,8BAFA,EAGA,SAHA;AAMH,KAXD,CAWE,OAAOC,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAL,MAAAA,QAAQ,CAAE4B,qBAAqB,EAAvB,CAAR;AACH;AAEJ,GAnBD;AAoBH;;AAED,MAAMH,uBAAuB,GAAID,EAAD,KAAS;AACrCZ,EAAAA,IAAI,EAAExB,yBAD+B;AAErCyB,EAAAA,OAAO,EAAEW;AAF4B,CAAT,CAAhC;;AAKA,MAAMG,qBAAqB,GAAG,OAAO;AACjCf,EAAAA,IAAI,EAAEvB,wBAD2B;AAEjCwB,EAAAA,OAAO,EAAE;AAFwB,CAAP,CAA9B;;AAKA,MAAMe,qBAAqB,GAAG,OAAO;AACjChB,EAAAA,IAAI,EAAEtB,wBAD2B;AAEjCuB,EAAAA,OAAO,EAAE;AAFwB,CAAP,CAA9B,C,CAKA;;;AACA,OAAO,SAASgB,2BAAT,CAAqC9B,QAArC,EAA+C;AAClD,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAE8B,qBAAqB,CAAC/B,QAAD,CAAvB,CAAR;AACH,GAFD;AAGH;;AAED,MAAM+B,qBAAqB,GAAI/B,QAAD,KAAe;AACzCa,EAAAA,IAAI,EAAErB,uBADmC;AAEzCsB,EAAAA,OAAO,EAAEd;AAFgC,CAAf,CAA9B,C,CAKA;;;AACA,OAAO,SAASgC,oBAAT,CAA8BhC,QAA9B,EAAwC;AAC3C,SAAO,MAAOC,QAAP,IAAoB;AACvBA,IAAAA,QAAQ,CAAEgC,cAAc,EAAhB,CAAR;;AAEA,QAAI;AACA,YAAMrC,YAAY,CAACsC,GAAb,CAAkB,cAAalC,QAAQ,CAACyB,EAAG,EAA3C,EAA8CzB,QAA9C,CAAN;AACAC,MAAAA,QAAQ,CAAEkC,mBAAmB,CAACnC,QAAD,CAArB,CAAR;AAEH,KAJD,CAIE,OAAOM,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAVD;AAWH;;AAED,MAAM2B,cAAc,GAAG,OAAO;AAC1BpB,EAAAA,IAAI,EAAEpB;AADoB,CAAP,CAAvB;;AAIA,MAAM0C,mBAAmB,GAAInC,QAAD,KAAe;AACvCa,EAAAA,IAAI,EAAEnB,sBADiC;AAEvCoB,EAAAA,OAAO,EAAEd;AAF8B,CAAf,CAA5B","sourcesContent":["import {  \nAGREGAR_PRODUCTO,\nAGREGAR_PRODUCTO_EXITO,\nAGREGAR_PRODUCTO_ERROR,\nCOMENZAR_DESCARGA_PRODUCTOS,\nDESCARGA_PRODUCTOS_EXITO,\nDESCARGA_PRODUCTOS_ERROR,\nOBTENER_PRODUCTO_ELIMINAR,\nPRODUCTO_ELIMINADO_EXITO,\nPRODUCTO_ELIMINADO_ERROR,\nOBTENER_PRODUCTO_EDITAR,\nCOMENZAR_EDICION_PRODUCTO,\nPRODUCTO_EDITADO_EXITO,\nPRODUCTO_EDITADO_ERROR\n} from '../types';\nimport clienteAxios from '../config/axios';\nimport swalWithBootstrapButtons from 'sweetalert2';\nimport Swal from 'sweetalert2';\n\n// Crear nuevos productos\nexport function crearNuevoProductoAction(producto) {\n    return async (dispatch) => {\n        dispatch( agregarProducto() );\n\n        try {\n            // Insertar en la API\n            await clienteAxios.post('/productos', producto);\n\n            // Si todo es correcto actualizamos el state\n            dispatch( agregarProductoExito(producto) );\n\n            // Alerta\n            Swal.fire(\n                'Agregado',\n                'Se agrego un nuevo producto',\n                'success'\n            );\n\n        } catch (error) {\n            console.log(error);\n            // Si hay un error cambiar el state\n            dispatch( agregarProductoError(true) );\n\n            // Alerta error\n            Swal.fire({\n                icon: 'error',\n                title: 'Hubo un error',\n                text: 'Por favor intenta de nuevo.'\n            });\n        }\n    }\n}\n\nconst agregarProducto = () => ({\n    type: AGREGAR_PRODUCTO,\n    payload: true\n})\n\n// Si el producto se guarda en la DB\nconst agregarProductoExito = producto => ({\n    type: AGREGAR_PRODUCTO_EXITO,\n    payload: producto\n})\n\n// Si hubo un error\nconst agregarProductoError = (estado) => ({\n    type: AGREGAR_PRODUCTO_ERROR,\n    payload: estado\n})\n\n// Funcion que descarga los productos de la DB\nexport function obtenerProductosAction() {\n    return async (dispatch) => {\n        dispatch( descargarProductos() );\n\n        try {\n            const respuesta = await clienteAxios.get('/productos');\n            dispatch( descargaProductosExitosa(respuesta.data) );\n\n        } catch (error) {\n            console.log(error);\n            dispatch( descargaProductosError() );\n        }\n    }\n}\n\nconst descargarProductos = () => ({\n    type: COMENZAR_DESCARGA_PRODUCTOS,\n    payload: true\n})\n\nconst descargaProductosExitosa = (productos) => ({\n    type: DESCARGA_PRODUCTOS_EXITO,\n    payload: productos\n})\n\nconst descargaProductosError = () => ({\n    type: DESCARGA_PRODUCTOS_ERROR,\n    payload: true\n})\n\n// Selecciona y elimina el producto \nexport function borrarProductoAction(id) {\n    return async (dispatch) => {\n        dispatch( obtenerProductoEliminar(id) );\n\n        try {\n            await clienteAxios.delete(`/productos/${id}`);\n            dispatch( eliminarProductoExito() );\n\n            // Si se elimina mostrar alerta\n            swalWithBootstrapButtons.fire(\n            'Eliminado!',\n            'Este producto fue eliminado.',\n            'success'\n            )\n\n        } catch (error) {\n            console.log(error);\n            dispatch( eliminarProductoError() )\n        }\n        \n    }\n}\n\nconst obtenerProductoEliminar = (id) => ({\n    type: OBTENER_PRODUCTO_ELIMINAR,\n    payload: id\n})\n\nconst eliminarProductoExito = () => ({\n    type: PRODUCTO_ELIMINADO_EXITO,\n    payload: null\n})\n\nconst eliminarProductoError = () => ({\n    type: PRODUCTO_ELIMINADO_ERROR,\n    payload: true\n})\n\n// Obtener un producto para su edicion\nexport function obtenerProductoEditarAction(producto) {\n    return async (dispatch) => {\n        dispatch( obtenerProductoEditar(producto) );\n    }\n}\n\nconst obtenerProductoEditar = (producto) => ({\n    type: OBTENER_PRODUCTO_EDITAR,\n    payload: producto\n})\n\n// Editar un producto en la api y el state\nexport function editarProductoAction(producto) {\n    return async (dispatch) => {\n        dispatch( editarProducto() );\n\n        try {\n            await clienteAxios.put(`/productos/${producto.id}`, producto);\n            dispatch( editarProductoExito(producto) )\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst editarProducto = () => ({\n    type: COMENZAR_EDICION_PRODUCTO\n})\n\nconst editarProductoExito = (producto) => ({\n    type: PRODUCTO_EDITADO_EXITO,\n    payload: producto\n})"]},"metadata":{},"sourceType":"module"}